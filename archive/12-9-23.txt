import openai
import os
import time
import speech_recognition as sr
import requests
import pygame
import keyboard

# Initialize the OpenAI client with your API key
api_key = os.environ.get('OPENAI_API_KEY')
if not api_key:
    raise ValueError("No OpenAI API key found in environment variables")

client = openai.OpenAI(api_key=api_key)

# Check for existing assistants or create a new one
assistants = client.beta.assistants.list(order="desc", limit="20")
if not assistants.data:
    print('>> Creating MEESO...')
    assistant = client.beta.assistants.create(
        name="MEESO",
        instructions="You're an assistant named MEESO, it stands for Molly's Expert in Efficient Specialized Operations.",
        model="gpt-3.5-turbo",
        tools=[{"type": "code_interpreter"}],
    )
    assistant_id = assistant.id
else:
    assistant_id = assistants.data[0].id

print('assistant.id: ' + assistant_id)
existing_thread_id = "thread_zYVPSfD048pQbxqoLmmuKyPJ"
thread_details = client.beta.threads.retrieve(thread_id=existing_thread_id)
print("Thread Details:")
print(thread_details)

def ask_openai(assistant_id, question):
    message = client.beta.threads.messages.create(
    thread_id=existing_thread_id,
    role="user",
    content=question
)
    run = client.beta.threads.runs.create(
    thread_id=existing_thread_id,
    assistant_id=assistant_id,
    )
    # Wait for the run to complete and retrieve the response
 
    while True:

        run = client.beta.threads.runs.retrieve(
            thread_id=existing_thread_id,
            run_id=run.id
        ) 
        if run.status == 'completed':
            thread_messages = client.beta.threads.messages.list(existing_thread_id)
            for message in thread_messages.data:
                if message.role == "assistant":
                    last_message = message.content[0].text.value
                    #return (last_message)
                    tts_file = text_to_speech(last_message)  # Convert text to speech
                    return last_message, tts_file
            return ">> No response from the assistant.", None
        print('>> MEESO is thinking...')
        time.sleep(2)

                
def start_cli():
    input_method = input("\n>> Choose input method: Type 'voice' for voice recognition or 'type' for typing: ").lower()
    assistant_id = assistants.data[0].id
    if input_method == 'voice':
        voice_input_mode(assistant_id)
    elif input_method == 'type':
        typing_input_mode(assistant_id)
    else:
        print("[ERROR] Invalid input method. Please type 'voice' or 'type'.")


def text_to_speech(text, voice="fable", model="tts-1"):
    api_key = os.environ.get('OPENAI_API_KEY')
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }

    data = {
        "model": model,
        "input": text,
        "voice": voice,
        "speed": 1.15
    }
    response = requests.post("https://api.openai.com/v1/audio/speech", json=data, headers=headers)
    
    if response.status_code == 200:
        audio_folder = "audio"
        if not os.path.exists(audio_folder):
            os.makedirs(audio_folder)

        audio_file = os.path.join(audio_folder, f"output_{int(time.time())}.mp3")
        with open(audio_file, "wb") as file:
            file.write(response.content)
        return audio_file
    else:
        print("[ERROR] Error in TTS:", response.status_code, response.text)
        return None

def play_audio(file_path):
    pygame.mixer.init()
    pygame.mixer.music.load(file_path)
    pygame.mixer.music.play()

    print("\n>> Audio is playing. Press the spacebar to interrupt.\n")

    while pygame.mixer.music.get_busy():
        if keyboard.is_pressed('space'):
            pygame.mixer.music.stop()
            print(">> Audio playback interrupted.\n")
            break
        pygame.time.Clock().tick(10)

    # Ensure the mixer is unloaded before deleting the file
    pygame.mixer.music.unload()
    pygame.mixer.quit()

    # Wait a moment to ensure the file is released
    time.sleep(1)

    # Delete the audio file after playing or interrupting
    try:
        os.remove(file_path)
    except PermissionError:
        print(f"[ERROR] Unable to delete the file: {file_path}. It may still be in use.")

def voice_input_mode(assistant_id):
    recognizer = sr.Recognizer()
    microphone = sr.Microphone()
    print(">> MEESO Assistant Ready (Voice Mode). Press Enter to start speaking. Recording will stop if silence is detected for 5 seconds.")

    while True:
        print(">> Press Enter to start speaking...")
        keyboard.wait('enter')  # Wait for Enter key to be pressed
        with microphone as source:
            
            try:
                recognizer.adjust_for_ambient_noise(source,duration=2)
                print(">> Listening... Speak now.")
                recognizer.pause_threshold = 2.0
                audio = recognizer.listen(source, timeout=5)
                user_input = recognizer.recognize_google(audio).lower()
                print("original string: " + user_input)
                user_input = user_input.replace('miso', 'MEESO')
                user_input = user_input.replace('me so', 'MEESO')
                user_input = user_input.replace('mesa', 'MEESO')

                if user_input == 'exit':
                    print(">> Exiting MEESO Assistant.")
                    break

                print("You: " + user_input)
                response, tts_file = ask_openai(assistant_id, user_input)
                print("MEESO:", response)
                if tts_file:
                    play_audio(tts_file)

            except sr.WaitTimeoutError:
                print("[ERROR] No speech detected.")
                continue  # Return to the start of the loop for another input
            except sr.UnknownValueError:
                print("[ERROR] Sorry, I did not understand that.")
            except sr.RequestError as e:
                print(f"[ERROR] Could not request results; {e}")


def typing_input_mode(assistant_id):
    print(">> MEESO Assistant Ready (Typing Mode). Type your query, or type 'exit' to quit.")

    while True:
        user_input = input("You: ").strip().lower()

        if user_input == 'exit':
            print(">> Exiting MEESO Assistant.")
            break
        
        # response = ask_openai(assistant_id, user_input)
        # print("MEESO:", response)
        response, tts_file = ask_openai(assistant_id, user_input)
        print("MEESO:", response)
        if tts_file:
            play_audio(tts_file)

if __name__ == "__main__":
    start_cli()
